{"version":3,"sources":["@traceur/generated/TemplateParser/6","@traceur/generated/TemplateParser/5","lexer_spec.js","@traceur/generated/TemplateParser/9","@traceur/generated/TemplateParser/7","@traceur/generated/TemplateParser/10","@traceur/generated/TemplateParser/23","@traceur/generated/TemplateParser/164","@traceur/generated/TemplateParser/167","@traceur/generated/TemplateParser/4","@traceur/generated/TemplateParser/3","@traceur/generated/TemplateParser/13","@traceur/generated/TemplateParser/8"],"names":[],"mappings":"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","file":"/Users/patrick/Documents/open source/angular/modules/angular2/test/change_detection/parser/lexer_spec.js","sourceRoot":"/Users/patrick/Documents/open source/angular/modules/angular2/test/change_detection/parser/","sourcesContent":["System.register($__placeholder__0, $__placeholder__1, function($__export) {\n          $__placeholder__2\n        });","var __moduleName = $__placeholder__0;","import {describe, it, expect} from 'angular2/test_lib';\n\nimport {Lexer, Token} from 'angular2/src/change_detection/parser/lexer';\n\nimport {List, ListWrapper} from \"angular2/src/facade/collection\";\nimport {StringWrapper, int} from \"angular2/src/facade/lang\";\n\nfunction lex(text:string):List {\n  return new Lexer().tokenize(text);\n}\n\nfunction expectToken(token, index) {\n  expect(token instanceof Token).toBe(true);\n  expect(token.index).toEqual(index);\n}\n\nfunction expectCharacterToken(token, index, character) {\n  expect(character.length).toBe(1);\n  expectToken(token, index);\n  expect(token.isCharacter(StringWrapper.charCodeAt(character, 0))).toBe(true);\n}\n\nfunction expectOperatorToken(token, index, operator) {\n  expectToken(token, index);\n  expect(token.isOperator(operator)).toBe(true);\n}\n\nfunction expectNumberToken(token, index, n) {\n  expectToken(token, index);\n  expect(token.isNumber()).toBe(true);\n  expect(token.toNumber()).toEqual(n);\n}\n\nfunction expectStringToken(token, index, str) {\n  expectToken(token, index);\n  expect(token.isString()).toBe(true);\n  expect(token.toString()).toEqual(str);\n}\n\nfunction expectIdentifierToken(token, index, identifier) {\n  expectToken(token, index);\n  expect(token.isIdentifier()).toBe(true);\n  expect(token.toString()).toEqual(identifier);\n}\n\nfunction expectKeywordToken(token, index, keyword) {\n  expectToken(token, index);\n  expect(token.isKeyword()).toBe(true);\n  expect(token.toString()).toEqual(keyword);\n}\n\n\nexport function main() {\n  describe('lexer', function() {\n    describe('token', function() {\n      it('should tokenize a simple identifier', function() {\n        var tokens:List<int> = lex(\"j\");\n        expect(tokens.length).toEqual(1);\n        expectIdentifierToken(tokens[0], 0, 'j');\n      });\n\n      it('should tokenize a dotted identifier', function() {\n        var tokens:List<int> = lex(\"j.k\");\n        expect(tokens.length).toEqual(3);\n        expectIdentifierToken(tokens[0], 0, 'j');\n        expectCharacterToken (tokens[1], 1, '.');\n        expectIdentifierToken(tokens[2], 2, 'k');\n      });\n\n      it('should tokenize an operator', function() {\n        var tokens:List<int> = lex(\"j-k\");\n        expect(tokens.length).toEqual(3);\n        expectOperatorToken(tokens[1], 1, '-');\n      });\n\n      it('should tokenize an indexed operator', function() {\n        var tokens:List<int> = lex(\"j[k]\");\n        expect(tokens.length).toEqual(4);\n        expectCharacterToken(tokens[1], 1, \"[\");\n        expectCharacterToken(tokens[3], 3, \"]\");\n      });\n\n      it('should tokenize numbers', function() {\n        var tokens:List<int> = lex(\"88\");\n        expect(tokens.length).toEqual(1);\n        expectNumberToken(tokens[0], 0, 88);\n      });\n\n      it('should tokenize numbers within index ops', function() {\n        expectNumberToken(lex(\"a[22]\")[2], 2, 22);\n      });\n\n      it('should tokenize simple quoted strings', function() {\n        expectStringToken(lex('\"a\"')[0], 0, \"a\");\n      });\n\n      it('should tokenize quoted strings with escaped quotes', function() {\n        expectStringToken(lex('\"a\\\\\"\"')[0], 0, 'a\"');\n      });\n\n      it('should tokenize a string', function() {\n        var tokens:List<Token> = lex(\"j-a.bc[22]+1.3|f:'a\\\\\\'c':\\\"d\\\\\\\"e\\\"\");\n        expectIdentifierToken(tokens[0], 0, 'j');\n        expectOperatorToken(tokens[1], 1, '-');\n        expectIdentifierToken(tokens[2], 2, 'a');\n        expectCharacterToken(tokens[3], 3, '.');\n        expectIdentifierToken(tokens[4], 4, 'bc');\n        expectCharacterToken(tokens[5], 6, '[');\n        expectNumberToken(tokens[6], 7, 22);\n        expectCharacterToken(tokens[7], 9, ']');\n        expectOperatorToken(tokens[8], 10, '+');\n        expectNumberToken(tokens[9], 11, 1.3);\n        expectOperatorToken(tokens[10], 14, '|');\n        expectIdentifierToken(tokens[11], 15, 'f');\n        expectCharacterToken(tokens[12], 16, ':');\n        expectStringToken(tokens[13], 17, \"a'c\");\n        expectCharacterToken(tokens[14], 23, ':');\n        expectStringToken(tokens[15], 24, 'd\"e');\n      });\n\n      it('should tokenize undefined', function() {\n        var tokens:List<Token> = lex(\"undefined\");\n        expectKeywordToken(tokens[0], 0, \"undefined\");\n        expect(tokens[0].isKeywordUndefined()).toBe(true);\n      });\n\n      it('should ignore whitespace', function() {\n        var tokens:List<Token> = lex(\"a \\t \\n \\r b\");\n        expectIdentifierToken(tokens[0], 0, 'a');\n        expectIdentifierToken(tokens[1], 8, 'b');\n      });\n\n      it('should tokenize quoted string', function() {\n        var str = \"['\\\\'', \\\"\\\\\\\"\\\"]\";\n        var tokens:List<Token> = lex(str);\n        expectStringToken(tokens[1], 1, \"'\");\n        expectStringToken(tokens[3], 7, '\"');\n      });\n\n      it('should tokenize escaped quoted string', function() {\n        var str = '\"\\\\\"\\\\n\\\\f\\\\r\\\\t\\\\v\\\\u00A0\"';\n        var tokens:List<Token> = lex(str);\n        expect(tokens.length).toEqual(1);\n        expect(tokens[0].toString()).toEqual('\"\\n\\f\\r\\t\\v\\u00A0');\n      });\n\n      it('should tokenize unicode', function() {\n        var tokens:List<Token> = lex('\"\\\\u00A0\"');\n        expect(tokens.length).toEqual(1);\n        expect(tokens[0].toString()).toEqual('\\u00a0');\n      });\n\n      it('should tokenize relation', function() {\n        var tokens:List<Token> = lex(\"! == != < > <= >=\");\n        expectOperatorToken(tokens[0], 0, '!');\n        expectOperatorToken(tokens[1], 2, '==');\n        expectOperatorToken(tokens[2], 5, '!=');\n        expectOperatorToken(tokens[3], 8, '<');\n        expectOperatorToken(tokens[4], 10, '>');\n        expectOperatorToken(tokens[5], 12, '<=');\n        expectOperatorToken(tokens[6], 15, '>=');\n      });\n\n      it('should tokenize statements', function() {\n        var tokens:List<Token> = lex(\"a;b;\");\n        expectIdentifierToken(tokens[0], 0, 'a');\n        expectCharacterToken(tokens[1], 1, ';');\n        expectIdentifierToken(tokens[2], 2, 'b');\n        expectCharacterToken(tokens[3], 3, ';');\n      });\n\n      it('should tokenize function invocation', function() {\n        var tokens:List<Token> = lex(\"a()\");\n        expectIdentifierToken(tokens[0], 0, 'a');\n        expectCharacterToken(tokens[1], 1, '(');\n        expectCharacterToken(tokens[2], 2, ')');\n      });\n\n      it('should tokenize simple method invocations', function() {\n        var tokens:List<Token> = lex(\"a.method()\");\n        expectIdentifierToken(tokens[2], 2, 'method');\n      });\n\n      it('should tokenize method invocation', function() {\n        var tokens:List<Token> = lex(\"a.b.c (d) - e.f()\");\n        expectIdentifierToken(tokens[0], 0, 'a');\n        expectCharacterToken(tokens[1], 1, '.');\n        expectIdentifierToken(tokens[2], 2, 'b');\n        expectCharacterToken(tokens[3], 3, '.');\n        expectIdentifierToken(tokens[4], 4, 'c');\n        expectCharacterToken(tokens[5], 6, '(');\n        expectIdentifierToken(tokens[6], 7, 'd');\n        expectCharacterToken(tokens[7], 8, ')');\n        expectOperatorToken(tokens[8], 10, '-');\n        expectIdentifierToken(tokens[9], 12, 'e');\n        expectCharacterToken(tokens[10], 13, '.');\n        expectIdentifierToken(tokens[11], 14, 'f');\n        expectCharacterToken(tokens[12], 15, '(');\n        expectCharacterToken(tokens[13], 16, ')');\n      });\n\n      it('should tokenize number', function() {\n        var tokens:List<Token> = lex(\"0.5\");\n        expectNumberToken(tokens[0], 0, 0.5);\n      });\n\n      // NOTE(deboer): NOT A LEXER TEST\n      //    it('should tokenize negative number', function() {\n      //      var tokens:List<Token> = lex(\"-0.5\");\n      //      expectNumberToken(tokens[0], 0, -0.5);\n      //    });\n\n      it('should tokenize number with exponent', function() {\n        var tokens:List<Token> = lex(\"0.5E-10\");\n        expect(tokens.length).toEqual(1);\n        expectNumberToken(tokens[0], 0, 0.5E-10);\n        tokens = lex(\"0.5E+10\");\n        expectNumberToken(tokens[0], 0, 0.5E+10);\n      });\n\n      it('should throws exception for invalid exponent', function() {\n        expect(function() {\n          lex(\"0.5E-\");\n        }).toThrowError('Lexer Error: Invalid exponent at column 4 in expression [0.5E-]');\n\n        expect(function() {\n          lex(\"0.5E-A\");\n        }).toThrowError('Lexer Error: Invalid exponent at column 4 in expression [0.5E-A]');\n      });\n\n      it('should tokenize number starting with a dot', function() {\n        var tokens:List<Token> = lex(\".5\");\n        expectNumberToken(tokens[0], 0, 0.5);\n      });\n\n      it('should throw error on invalid unicode', function() {\n        expect(function() {\n          lex(\"'\\\\u1''bla'\");\n        }).toThrowError(\"Lexer Error: Invalid unicode escape [\\\\u1''b] at column 2 in expression ['\\\\u1''bla']\");\n      });\n\n      it('should tokenize hash as operator', function() {\n        var tokens:List<Token> = lex(\"#\");\n        expectOperatorToken(tokens[0], 0, '#');\n      });\n\n    });\n  });\n}\n","assert.argumentTypes($__placeholder__0)","assert.type.$__placeholder__0)","return assert.returnType(($__placeholder__0), $__placeholder__1)","assert.type($__placeholder__0, $__placeholder__1)","assert.genericType($__placeholder__0)","\n        $__export($__placeholder__0, $__placeholder__1)\n      ","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function($__m) {\n          $__placeholder__0\n        }","$__placeholder__0 = $__m.$__placeholder__1;","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});"]}