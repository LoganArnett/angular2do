{"version":3,"sources":["@traceur/generated/TemplateParser/6","@traceur/generated/TemplateParser/5","context_with_variable_bindings_spec.js","@traceur/generated/TemplateParser/167","@traceur/generated/TemplateParser/4","@traceur/generated/TemplateParser/3","@traceur/generated/TemplateParser/13"],"names":[],"mappings":"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","file":"/Users/patrick/Documents/open source/angular/modules/angular2/test/change_detection/parser/context_with_variable_bindings_spec.js","sourceRoot":"/Users/patrick/Documents/open source/angular/modules/angular2/test/change_detection/parser/","sourcesContent":["System.register($__placeholder__0, $__placeholder__1, function($__export) {\n          $__placeholder__2\n        });","var __moduleName = $__placeholder__0;","import {ddescribe, describe, it, xit, iit, expect, beforeEach} from 'angular2/test_lib';\n\nimport {ContextWithVariableBindings} from 'angular2/src/change_detection/parser/context_with_variable_bindings';\n\nimport {BaseException, isBlank, isPresent} from 'angular2/src/facade/lang';\nimport {MapWrapper, ListWrapper} from 'angular2/src/facade/collection';\n\nexport function main() {\n  describe('ContextWithVariableBindings', () => {\n    var locals;\n    beforeEach(() => {\n      locals = new ContextWithVariableBindings(null,\n          MapWrapper.createFromPairs([['key', 'value'], ['nullKey', null]]));\n    });\n\n    it('should support getting values', () => {\n      expect(locals.get('key')).toBe('value');\n\n      var notPresentValue = locals.get('notPresent');\n      expect(isPresent(notPresentValue)).toBe(false);\n    });\n\n    it('should support checking if key is persent', () => {\n      expect(locals.hasBinding('key')).toBe(true);\n      expect(locals.hasBinding('nullKey')).toBe(true);\n      expect(locals.hasBinding('notPresent')).toBe(false);\n    });\n\n    it('should support setting persent keys', () => {\n      locals.set('key', 'bar');\n      expect(locals.get('key')).toBe('bar');\n    });\n\n    it('should not support setting keys that are not present already', () => {\n      expect(() => locals.set('notPresent', 'bar')).toThrowError();\n    });\n\n    it('should clearValues', () => {\n      locals.clearValues();\n      expect(locals.get('key')).toBe(null);\n    });\n  })\n}\n\n","\n        $__export($__placeholder__0, $__placeholder__1)\n      ","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function($__m) {\n          $__placeholder__0\n        }","$__placeholder__0 = $__m.$__placeholder__1;"]}