{"version":3,"sources":["@traceur/generated/TemplateParser/6","@traceur/generated/TemplateParser/5","coalesce_spec.js","@traceur/generated/TemplateParser/167","@traceur/generated/TemplateParser/4","@traceur/generated/TemplateParser/3","@traceur/generated/TemplateParser/13"],"names":[],"mappings":"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","file":"/Users/patrick/Documents/open source/angular/modules/angular2/test/change_detection/coalesce_spec.js","sourceRoot":"/Users/patrick/Documents/open source/angular/modules/angular2/test/change_detection/","sourcesContent":["System.register($__placeholder__0, $__placeholder__1, function($__export) {\n          $__placeholder__2\n        });","var __moduleName = $__placeholder__0;","import {ddescribe, describe, it, iit, xit, expect, beforeEach, afterEach} from 'angular2/test_lib';\n\nimport {coalesce} from 'angular2/src/change_detection/coalesce';\nimport {RECORD_TYPE_SELF, ProtoRecord} from 'angular2/src/change_detection/proto_change_detector';\n\nexport function main() {\n  function r(funcOrValue, args, contextIndex, selfIndex, lastInBinding = false) {\n    return new ProtoRecord(99,  \"name\", funcOrValue, args, null, contextIndex, selfIndex,\n      null, null, null, lastInBinding, false);\n  }\n\n  describe(\"change detection - coalesce\", () => {\n    it(\"should work with an empty list\", () => {\n      expect(coalesce([])).toEqual([]);\n    });\n\n    it(\"should remove non-terminal duplicate records\" +\n      \" and update the context indices referencing them\", () => {\n      var rs = coalesce([\n        r(\"user\",   [], 0, 1),\n        r(\"first\",  [], 1, 2),\n        r(\"user\",   [], 0, 3),\n        r(\"last\",   [], 3, 4)\n      ]);\n\n      expect(rs).toEqual([\n        r(\"user\",   [], 0, 1),\n        r(\"first\",  [], 1, 2),\n        r(\"last\",   [], 1, 3)\n      ]);\n    });\n\n    it(\"should update indices of other records\", () => {\n      var rs = coalesce([\n        r(\"dup\",   [],  0, 1),\n        r(\"dup\",   [],  0, 2),\n        r(\"user\",  [],  0, 3),\n        r(\"first\", [3], 3, 4)\n      ]);\n\n      expect(rs).toEqual([\n        r(\"dup\",   [],  0, 1),\n        r(\"user\",  [],  0, 2),\n        r(\"first\", [2], 2, 3)\n      ]);\n    });\n\n    it(\"should remove non-terminal duplicate records\" +\n      \" and update the args indices referencing them\", () => {\n      var rs = coalesce([\n        r(\"user1\",  [],  0, 1),\n        r(\"user2\",  [],  0, 2),\n        r(\"hi\",     [1], 0, 3),\n        r(\"hi\",     [1], 0, 4),\n        r(\"hi\",     [2], 0, 5)\n      ]);\n\n      expect(rs).toEqual([\n        r(\"user1\",  [],  0, 1),\n        r(\"user2\",  [],  0, 2),\n        r(\"hi\",     [1], 0, 3),\n        r(\"hi\",     [2], 0, 4)\n      ]);\n    });\n\n    it(\"should replace duplicate terminal records with\" +\n      \" self records\", () => {\n\n      var rs = coalesce([\n        r(\"user\",  [],  0, 1, true),\n        r(\"user\",  [],  0, 2, true)\n      ]);\n\n      expect(rs[1]).toEqual(new ProtoRecord(\n        RECORD_TYPE_SELF, \"self\", null,\n        [], null, 1, 2,\n        null, null, null,\n        true, false)\n      );\n    });\n  });\n}\n","\n        $__export($__placeholder__0, $__placeholder__1)\n      ","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function($__m) {\n          $__placeholder__0\n        }","$__placeholder__0 = $__m.$__placeholder__1;"]}