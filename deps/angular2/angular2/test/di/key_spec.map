{"version":3,"sources":["@traceur/generated/TemplateParser/6","@traceur/generated/TemplateParser/5","key_spec.js","@traceur/generated/TemplateParser/167","@traceur/generated/TemplateParser/4","@traceur/generated/TemplateParser/3","@traceur/generated/TemplateParser/13"],"names":[],"mappings":"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","file":"/Users/patrick/Documents/open source/angular/modules/angular2/test/di/key_spec.js","sourceRoot":"/Users/patrick/Documents/open source/angular/modules/angular2/test/di/","sourcesContent":["System.register($__placeholder__0, $__placeholder__1, function($__export) {\n          $__placeholder__2\n        });","var __moduleName = $__placeholder__0;","import {describe, iit, it, expect, beforeEach} from 'angular2/test_lib';\nimport {Key, KeyRegistry} from 'angular2/di';\n\nexport function main() {\n\n  describe(\"key\", function () {\n    var registry;\n\n    beforeEach(function () {\n      registry = new KeyRegistry();\n    });\n\n    it('should be equal to another key if type is the same', function () {\n      expect(registry.get('car')).toBe(registry.get('car'));\n    });\n\n    it('should not be equal to another key if types are different', function () {\n      expect(registry.get('car')).not.toBe(registry.get('porsche'));\n    });\n\n    it('should return the passed in key', function () {\n      expect(registry.get(registry.get('car'))).toBe(registry.get('car'));\n    });\n\n    describe(\"metadata\", function () {\n      it(\"should assign metadata to a key\", function () {\n        var key = registry.get('car');\n\n        Key.setMetadata(key, \"meta\");\n\n        expect(key.metadata).toEqual(\"meta\");\n      });\n\n      it(\"should allow assigning the same metadata twice\", function () {\n        var key = registry.get('car');\n\n        Key.setMetadata(key, \"meta\");\n        Key.setMetadata(key, \"meta\");\n\n        expect(key.metadata).toEqual(\"meta\");\n      });\n\n      it(\"should throw when assigning different metadata\", function () {\n        var key = registry.get('car');\n\n        Key.setMetadata(key, \"meta1\");\n\n        expect(() => Key.setMetadata(key, \"meta2\")).toThrowError();\n      });\n    });\n  });\n}","\n        $__export($__placeholder__0, $__placeholder__1)\n      ","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function($__m) {\n          $__placeholder__0\n        }","$__placeholder__0 = $__m.$__placeholder__1;"]}