{"version":3,"sources":["@traceur/generated/TemplateParser/6","@traceur/generated/TemplateParser/5","template_loader_spec.js","@traceur/generated/TemplateParser/289","@traceur/generated/TemplateParser/167","@traceur/generated/TemplateParser/4","@traceur/generated/TemplateParser/3","@traceur/generated/TemplateParser/13","@traceur/generated/TemplateParser/31","@traceur/generated/TemplateParser/15"],"names":[],"mappings":"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","file":"/Users/patrick/Documents/open source/angular/modules/angular2/test/core/compiler/template_loader_spec.js","sourceRoot":"/Users/patrick/Documents/open source/angular/modules/angular2/test/core/compiler/","sourcesContent":["System.register($__placeholder__0, $__placeholder__1, function($__export) {\n          $__placeholder__2\n        });","var __moduleName = $__placeholder__0;","import {describe, it, expect, beforeEach, ddescribe, iit, xit, el} from 'angular2/test_lib';\nimport {TemplateLoader} from 'angular2/src/core/compiler/template_loader';\nimport {Component} from 'angular2/src/core/annotations/annotations';\nimport {TemplateConfig} from 'angular2/src/core/annotations/template_config';\nimport {DirectiveMetadata} from 'angular2/src/core/compiler/directive_metadata';\n\nimport {PromiseWrapper} from 'angular2/src/facade/async';\n\nimport {XHRMock} from 'angular2/src/mock/xhr_mock';\n\nexport function main() {\n  describe('TemplateLoader', () => {\n    var loader, xhr;\n\n    beforeEach(() => {\n      xhr = new XHRMock()\n      loader = new TemplateLoader(xhr);\n    });\n\n    function createMetadata({inline = null, url = null}={}) {\n      var config = new TemplateConfig({url: url, inline: inline});\n      var component = new Component({template: config});\n      return new DirectiveMetadata(FakeComponent, component, null);\n    }\n\n    it('should load inline templates', (done) => {\n      var template = 'inline template';\n      var md = createMetadata({inline: template});\n      loader.load(md).then((el) => {\n        expect(el.content).toHaveText(template);\n        done();\n      });\n    });\n\n    it('should load templates through XHR', (done) => {\n      var url = '/foo';\n      var template = 'xhr template';\n      xhr.expect(url, template);\n      var md = createMetadata({url: '/foo'});\n      loader.load(md).then((el) => {\n        expect(el.content).toHaveText(template);\n        done();\n      });\n      xhr.flush();\n    });\n\n    it('should cache template loaded through XHR', (done) => {\n      var firstEl;\n      var url = '/foo';\n      var template = 'xhr template';\n      xhr.expect(url, template);\n      var md = createMetadata({url: '/foo'});\n      loader.load(md)\n        .then((el) => {\n          firstEl = el;\n          return loader.load(md);\n        })\n        .then((el) =>{\n          expect(el).toBe(firstEl);\n          expect(el.content).toHaveText(template);\n          done();\n        });\n      xhr.flush();\n    });\n\n    it('should throw when no template is defined', () => {\n      var md = createMetadata();\n      expect(() => loader.load(md))\n        .toThrowError('No template configured for component FakeComponent');\n    });\n\n    it('should return a rejected Promise when xhr loading fails', (done) => {\n      var url = '/foo';\n      xhr.expect(url, null);\n      var md = createMetadata({url: '/foo'});\n      PromiseWrapper.then(loader.load(md),\n        function(_) { throw 'Unexpected response'; },\n        function(error) {\n          expect(error).toEqual('Failed to load /foo');\n          done();\n        }\n      )\n      xhr.flush();\n    });\n\n  });\n}\n\nclass FakeComponent {\n}\n","($__placeholder__0 = $__placeholder__1.$__placeholder__2) === void 0 ?\n        $__placeholder__3 : $__placeholder__4","\n        $__export($__placeholder__0, $__placeholder__1)\n      ","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function($__m) {\n          $__placeholder__0\n        }","$__placeholder__0 = $__m.$__placeholder__1;","$__placeholder__0 = $__placeholder__1","function() {\n          var $__placeholder__0 = $__placeholder__1;\n          return ($traceurRuntime.createClass)($__placeholder__2, $__placeholder__3,\n                                               $__placeholder__4);\n        }()"]}